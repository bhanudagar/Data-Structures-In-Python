'''
Kruskal's Algorithm

Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Kruskal's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format -

v1 v2 w

where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1 <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :

Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)

Output Format :

MST

Constraints :
2 <= V, E <= 10^5
Sample Input 1 :

4 4
0 1 3
0 3 5
1 2 1
2 3 8

Sample Output 1 :

1 2 1
0 1 3
0 3 5
'''
#Code
class Edge:
    def __init__(self, source, destination, weight):
        self.source = source
        self.destination = destination
        self.weight = weight
        
def getParent(v, parent):
    if v == parent[v]:
        return v
    return getParent(parent[v], parent)
        
def kruskal(edges, numVertices):
    parent = [i for i in range(numVertices)]
    edges = sorted(edges, key = lambda edge:edge.weight)
    count = 0
    output = []
    i = 0
    
    while count < numVertices - 1:
        currentEdge = edges[i]
        srcParent = getParent(currentEdge.source, parent)
        destParent = getParent(currentEdge.destination, parent)
        
        if srcParent != destParent:
            output.append(currentEdge)
            count += 1
            parent[srcParent] = destParent
        i+= 1
    return output
        

V, E = [int(x) for x in input().split()]

edges = []
    

for i in range(E):
    ei, ej, wi = [int(x) for x in input().split()]
    edge = Edge(ei, ej, wi)
    edges.append(edge)


output = kruskal(edges, V)
for edge in output:
    if edge.source < edge.destination:
        print(str(edge.source) + " " + str(edge.destination) + " " + str(edge.weight))
    else:
        print(str(edge.destination) + " " + str(edge.source) + " " + str(edge.weight))
        

