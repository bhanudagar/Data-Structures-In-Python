class graph:
	def __init__ (self, numVertices):
		self.numVertices = numVertices
		self.adjMatrix = [[0 for i in range(numVertices)] for j in range(numVertices)]
	
	def addEdge (self, v1, v2):
		
		self.adjMatrix[v1][v2] = 1
		self.adjMatrix[v2][v1] = 1
		
  	def __DFS_Helper(self, sv, visited):
		print(sv)
		visited[sv] = True
		for i in range(self.numVertices):
			if self.adjMatrix[sv][i] > 0 and visited[i] is False:
				self.__DFS_Helper(i, visited)
				
	def dfs(self):
		visited = [False for i in range(self.numVertices)]
		self.__DFS_Helper(0, visited)
	
	def deleteEdge (self, v1, v2):
		if not self.edgePresent(v1, v2):
			return 
		
		self.adjMatrix[v1][v2] = 0
		self.adjMatrix[v2][v1] = 0
		
	def edgePresent(self, v1, v2):
		if self.adjMatrix[v1][v2] == 1:
			return True
		else:
			return False
